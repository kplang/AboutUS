# KP Language Syntax Notes ✍️

## 🟢 Variables
```kp
a = 10
b = 5
```

## 🔁 Loops
```kp
count = 0
while True:
    print(count)
    count += 1
    sleep(1000)  # 1 second
```

## ✅ Conditions
```kp
if a > b:
    print("a is greater")
elif a == b:
    print("a equals b")
else:
    print("b is greater")
```

## 🧩 Functions
```kp
def greet(name):
    print("Hello, " + name)

greet("CodeVox")
```

## 📦 Modules (flat-style for now)
All `.kp` files loaded with `kp_runtime` get global access:
```kp
# no import needed; just use directly
read_sensor()
log_data(temp, hum)
ask_llm("Explain PWM")
```

## 🧠 LLM Integration
```kp
summary = ask_llm("Summarize sensor data")
print(summary)
```

## 🗣 Text-to-Speech (soon)
```kp
speak("Temperature rising, humidity falling")
```

## 🕰 Time
```kp
sleep(1500)  # sleep for 1.5 seconds
```

---

## 🧪 KP REPL Cheatsheet

| Command            | Description                         |
|--------------------|-------------------------------------|
| `a = 5`            | Assign value                        |
| `print(a)`         | Print variable                      |
| `def fn(): ...`    | Define function                     |
| `ask_llm("text")` | Query LLM, get response             |
| `speak("text")`    | Speak the given text (TTS)          |
| `sleep(1000)`      | Wait for 1 sec                      |
| `read_sensor()`    | Get temp/humidity (if module loaded)|
| `log_data(a, b)`   | Append to log file                  |

Use REPL to test syntax interactively: one line at a time.

---

## ⚙️ KP Embedded Syntax

### 🔌 GPIO
```kp
pin_mode(5, "OUTPUT")
pin_mode(6, "INPUT")

digital_write(5, 1)  # HIGH
digital_write(5, 0)  # LOW

val = digital_read(6)
print("Pin 6 state:", val)
```

### ⚡ PWM
```kp
pwm_start(3, freq=1000, duty=50)
pwm_set_duty(3, 75)
pwm_stop(3)
```

### 🔗 I2C
```kp
i2c_setup()
i2c_write(addr=0x76, reg=0xF4, data=0x27)
val = i2c_read(addr=0x76, reg=0xF4, len=1)
print("Register val:", val)
```

---
More syntax coming soon: SPI, UART, ADC, dashboards, API export, REPL tools and more!
